version: '2.4'

services:
  airflow-db:
    image: postgres:13
    container_name: airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db:/var/lib/postgresql/data
    networks:
      - kol-evaluate

  airflow-scheduler:
    image: spark_airflow:1.10
    container_name: airflow-scheduler
    depends_on:
      - airflow-db
    command: ["scheduler"]
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
      SPARK_WORKER_MEMORY: 4G
      SPARK_WORKER_CORES: 3
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/batch:/opt/bitnami/spark/ss
      - ./airflow/stream:/opt/bitnami/spark/sstream
    ports:
      - "7077:7077"   
      - "8070:8081"  
      - "8080:8080"  
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    networks:
      kol-evaluate:
        aliases:
          - spark-master

  airflow-web:
    image: spark_airflow:1.10
    container_name: airflow-web
    depends_on:
      - airflow-scheduler
    command: ["webserver"]
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    entrypoint: ["/opt/airflow/entrypoint.sh"]
    ports:
      - "8085:8085"   # Airflow web UI
    networks:
      kol-evaluate:

  crawler:
    image: hieupt_crawler:1.2
    container_name: crawler
    restart: always
    ports: 
      - 8090:8090
    volumes:
      - ./info:/app/info
    networks:
      - kol-evaluate

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./services/hadoop/hadoop.env
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    ports:
      - 9864:9864
      - 9866:9866
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./services/hadoop/hadoop.env
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864"
    env_file:
      - ./services/hadoop/hadoop.env
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g
  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 resourcemanager:8088"
    env_file:
      - ./services/hadoop/hadoop.env
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./services/hadoop/hadoop.env
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: always
    networks:
      - kol-evaluate
    cpus: 0.5
    mem_limit: 1g

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-broker-1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_NAMES: PLAINTEXT,PLAINTEXT_HOST
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_PORTS: 29092,9092
    volumes:
      - kafka-broker-1-data:/var/lib/kafka/data
    restart: always
    depends_on:
      - zookeeper
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-broker-2
    ports:
      - "9093:9093"
      - "29093:29093"
    restart: always
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_LISTENER_NAMES: PLAINTEXT,PLAINTEXT_HOST
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_PORTS: 29093,9093
    volumes:
      - kafka-broker-2-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - kol-evaluate
    cpus: 0.2
    mem_limit: 1g
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=Cluster1
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-broker-1:29092,kafka-broker-2:29093
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
    restart: always
    networks:
      - kol-evaluate

  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      - kol-evaluate
    volumes:
      - hive_metastore_postgresql:/var/lib/postgresql/data

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    environment:
      SERVICE_PRECONDITION: "hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
    env_file:
      - ./hadoop/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    restart: always
    networks:
      - kol-evaluate

  trino:
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino
    depends_on:
      - hive-metastore
    networks:
      - kol-evaluate
    cpus: 1.5
    mem_limit: 3g

  superset-db:
    image: postgres:13
    container_name: superset-db
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
      POSTGRES_DB: superset
    volumes:
      - superset_db:/var/lib/postgresql/data
    networks:
      - kol-evaluate

  superset-redis:
    image: redis:6-alpine
    container_name: superset-redis
    networks:
      - kol-evaluate

  superset:
    image: superset-trino:1.0
    container_name: superset
    restart: always
    ports:
      - "8088:8088"        
    environment:
      SUPERSET_ENV: production
      DATABASE_URL: postgresql+psycopg2://superset:superset@superset-db:5432/superset
      REDIS_URL: redis://superset-redis:6379/0
      SUPERSET_SECRET_KEY: hieupham2003
      SUPERSET_LOAD_EXAMPLES: 'yes'
    volumes:
      - ./superset/superset-init.sh:/app/run_superset.sh
      - superset_home:/app/superset_home  
    entrypoint: ["/app/run_superset.sh"]
    depends_on:
      - superset-db
      - superset-redis
    networks:
      - kol-evaluate
volumes:
  airflow_db:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_historyserver:
  zookeeper-data:
  kafka-broker-1-data:
  kafka-broker-2-data:
  postgres_db:
  postgres_db_volume:
  hive_metastore_postgresql:
  metastore_db:
  superset_db:
  superset_home:

networks:
  kol-evaluate:
    driver: bridge
